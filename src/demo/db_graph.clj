(ns demo.db-graph
  (:use [loom.graph]
        [loom.alg]
        [utils])
  (:require [clojure.string :only (join) :as st]))

(def owdg (weighted-digraph 
           [:AMS_PGM_ASSET_ALIGNMENT :AMS_ASSET "ASSET_ID"] 
           [:AMS_PGM_ASSET_ALIGNMENT :AMS_PROGRAM "PROGRAM_REF_ID"] 
           [:AMS_WF_STATE_SMY :AMS_ASSET "ASSET_ID"] 
           [:AMS_PROGRAM :AMS_ACCOUNT "ACCOUNT_ID"]
           [:AMS_PGM_HCHY :AMS_PROGRAM "SUBJECT_ID"] 
           [:AMS_PGM_HCHY :AMS_PROGRAM "RELATION_ID"] 
           [:AMS_ASSESSMENT_ITEM :AMS_ASSET "ASSET_ID"]))

(def owdg2 (weighted-digraph 
           [:AMS_PGM_ASSET_ALIGNMENT :AMS_ASSET "ASSET_ID"] 
           [:AMS_PGM_ASSET_ALIGNMENT :AMS_PROGRAM "PROGRAM_REF_ID"] 
           [:AMS_WF_STATE_SMY :AMS_ASSET "ASSET_ID"] 
           [:AMS_PROGRAM :AMS_ACCOUNT "ACCOUNT_ID"]))


(def sel-tables (list "AMS_ASSET" "AMS_PROGRAM" "AMS_WF_STATE_SMY" "AMS_ACCOUNT" "AMS_ASSESSMENT_ITEM" "AMS_WF_ACTIVITY" "AMS_WF_STATE"))

;(def owdg (weighted-digraph [:rp_authors :rp_user "user_id"]))
(def ams-graph '([:AMS_LEVEL_GRADE_MAP :AMS_PGM_METADATA_FIELD_VALUE "LEVEL_REF_ID"] [:AMS_ADP_METADATA_FV :AMS_PGM_METADATA_FIELD_VALUE "PGM_MDV_REF_ID"] [:AMS_WF_ACTIVITY :AMS_WF_PROCESS_DEF "PROCESS_DEF_REFID"] [:AMS_USER :AMS_ADDRESS "USER_ADDRESS_ID"] [:AMS_ART_ASSET_FILE :AMS_ART_ASSET "ART_ASSET_REFID"] [:AMS_STIMULUS_ALIGN_SCHEME :AMS_ASSET_DEV_PLAN "ADP_REF_ID"] [:AMS_ITEM_ALIGN_SCHEME :AMS_ASSET_DEV_PLAN "ADP_REF_ID"] [:AMS_ASSET_ORDER :AMS_ASSET_DEV_PLAN "ADP_REF_ID"] [:AMS_ASSET_DEV_PLAN :AMS_ASSET_DEV_PLAN "PARENT_REF_ID"] [:AMS_ADP_METADATA_FV :AMS_ASSET_DEV_PLAN "ADP_REF_ID"] [:AMS_ASSET_ORDER_ALIGN :AMS_ORDER_DETAIL "ORDER_DETAIL_REFID"] [:AMS_SEQ_REPORT :AMS_SEQUENCE "SEQUENCE_ID"] [:AMS_SEQUENCE_ELEMENT :AMS_SEQUENCE "SEQUENCE_ID"] [:AMS_SEQUENCE_ATTRIBUTE :AMS_SEQUENCE "SEQUENCE_ID"] [:AMS_WF_STATE :AMS_METADATA_VALUE "REJECT_REASON"] [:AMS_USER :AMS_METADATA_VALUE "DEPARTMENT"] [:AMS_PGM_METADATA_FIELD_VALUE :AMS_METADATA_VALUE "METADATA_VALUE_ID"] [:AMS_OTHER_ASSET_FV :AMS_METADATA_VALUE "MDV_REFID"] [:AMS_ORDER_METADATA_FV :AMS_METADATA_VALUE "METADATA_VALUE_REFID"] [:AMS_LEVEL_GRADE_MAP :AMS_METADATA_VALUE "GRADE_REF_ID"] [:AMS_ADP_METADATA_FV :AMS_METADATA_VALUE "METADATA_VALUE_REF_ID"] [:AMS_TEI_EXTENSION :AMS_ASSESSMENT_ITEM "ITEM_REF_ID"] [:AMS_ITEM_TOOLS :AMS_ASSESSMENT_ITEM "ITEM_REF_ID"] [:AMS_ITEM_STANDARD_ALIGNMENT :AMS_ASSESSMENT_ITEM "ITEM_REF_ID"] [:AMS_HOTSPOT_EXTENSION :AMS_ASSESSMENT_ITEM "ITEM_REF_ID"] [:AMS_CONTENT_PART :AMS_ASSESSMENT_ITEM "ITEM_REF_ID"] [:AMS_STANDARD :AMS_STANDARD_SET "STANDARD_SET_REFID"] [:AMS_PGM_STANDARD_ALIGNMENT :AMS_STANDARD_SET "STANDARD_SET_REFID"] [:AMS_HOTSPOT_CHOICE :AMS_TYPE_QUANTITY "TYPE_QUANTITY_REF_ID"] [:AMS_WF_STATE_SMY :AMS_ASSET "ASSET_ID"] [:AMS_WF_STATE :AMS_ASSET "ASSET_ID"] [:AMS_TEST_FORM :AMS_ASSET "ASSET_ID"] [:AMS_TEST :AMS_ASSET "ASSET_ID"] [:AMS_TEI_EXTENSION :AMS_ASSET "FOREGRND_ART_ASSET_ID"] [:AMS_TEI_EXTENSION :AMS_ASSET "BACKGRND_ART_ASSET_ID"] [:AMS_TEI_EXTENSION :AMS_ASSET "TEI_ART_ASSET_ID"] [:AMS_TEI_EXTENSION :AMS_ASSET "HS_ICON_ART_ASSET_ID"] [:AMS_STIMULUS :AMS_ASSET "ASSET_ID"] [:AMS_SEQUENCE_ELEMENT :AMS_ASSET "ASSET_ID"] [:AMS_PUBCONFIG_ASSET :AMS_ASSET "ASSET_ID"] [:AMS_PGM_ASSET_ALIGNMENT :AMS_ASSET "ASSET_ID"] [:AMS_OTHER_ASSET :AMS_ASSET "ASSET_ID"] [:AMS_HOTSPOT_EXTENSION :AMS_ASSET "BACKGRND_ART_ASSET_ID"] [:AMS_HOTSPOT_EXTENSION :AMS_ASSET "HS_ICON_ART_ASSET_ID"] [:AMS_HOTSPOT_CHOICE :AMS_ASSET "ART_ASSET_ID"] [:AMS_HOTSPOT_CHOICE :AMS_ASSET "ALT_ART_ASSET_ID"] [:AMS_ASSET_ORDER_ALIGN :AMS_ASSET "ASSET_ID"] [:AMS_ASSET_ORDER :AMS_ASSET "PARENT_ASSET_ID"] [:AMS_ASSET_FILE :AMS_ASSET "ASSET_ID"] [:AMS_ASSET_ASSOCIATION :AMS_ASSET "ASSET_ID_1"] [:AMS_ASSET_ASSOCIATION :AMS_ASSET "ASSET_ID_2"] [:AMS_ASSESSMENT_ITEM :AMS_ASSET "ASSET_ID"] [:AMS_ART_ASSET :AMS_ASSET "ASSET_ID"] [:AMS_TYPE_QUANTITY :AMS_HOTSPOT_EXTENSION "HS_EXT_REF_ID"] [:AMS_HOTSPOT_CHOICE :AMS_HOTSPOT_EXTENSION "HS_EXT_REF_ID"] [:AMS_SEQUENCE_ELEMENT :AMS_SEQUENCE_ELEMENT "PARENT_SEQUENCE_ELEMENT_ID"] [:AMS_STIMULUS_ALIGN_SCHEME :AMS_ADP_METADATA_FV "PASSAGE_TYPE_REF_ID"] [:AMS_STIMULUS_ALIGN_SCHEME :AMS_ADP_METADATA_FV "STIMULUS_SRC_REF_ID"] [:AMS_ORDER_METADATA_FV :AMS_ADP_METADATA_FV "ADP_METADATA_REFID"] [:AMS_ITEM_ALIGN_SCHEME :AMS_ADP_METADATA_FV "ASSET_TYPE_REF_ID"] [:AMS_ITEM_ALIGN_SCHEME :AMS_ADP_METADATA_FV "COGNITIVE_LEVEL_REF_ID"] [:AMS_ITEM_ALIGN_SCHEME :AMS_ADP_METADATA_FV "DIFFICULTY_LEVEL_REF_ID"] [:AMS_ITEM_ALIGN_SCHEME :AMS_ADP_METADATA_FV "KNOWLEDGE_LEVEL_REF_ID"] [:AMS_ITEM_ALIGN_SCHEME :AMS_ADP_METADATA_FV "PERFORMANCE_LEVEL_REF_ID"] [:AMS_ITEM_ALIGN_SCHEME :AMS_ADP_METADATA_FV "ASSET_SUBTYPE_REF_ID"] [:AMS_PROGRAM :AMS_ACCOUNT "ACCOUNT_ID"] [:AMS_STANDARD :AMS_STANDARD "PARENT_REFID"] [:AMS_ITEM_STANDARD_ALIGNMENT :AMS_STANDARD "STANDARD_REF_ID"] [:AMS_ITEM_STANDARD_ALIGNMENT :AMS_STANDARD "ROOT_STANDARD_REF_ID"] [:AMS_ITEM_ALIGN_SCHEME :AMS_STANDARD "STANDARD_REFID"] [:AMS_ORDER_DETAIL :AMS_ITEM_ALIGN_SCHEME "ITEM_ALIGN_SCHEME_REFID"] [:AMS_USER_ROLE_PERMISSION :AMS_USER_ROLE "USER_ROLE_ID"] [:AMS_USER_ROLE_GROUP :AMS_USER_ROLE "MEMBER_OF_ROLE"] [:AMS_USER_ROLE_GROUP :AMS_USER_ROLE "ROLE_REFERENCE_ID"] [:AMS_USER_ACCOUNT_ROLE :AMS_USER_ROLE "MEMBER_OF_ROLE"] [:AMS_AUTH_GRANT :AMS_USER_ROLE "USER_ROLE_ID"] [:AMS_STIMULUS_READABILITY_ALIGN :AMS_STIMULUS "STIMULUS_REF_ID"] [:AMS_CONTENT_PART :AMS_STIMULUS "STIMULUS_REF_ID"] [:AMS_ASSET_CONTENT :AMS_CONTENT_PART "CONTENT_PART_REF_ID"] [:AMS_STIMULUS :AMS_ADP_DEV_YEAR "DEV_YEAR_CODE"] [:AMS_ASSET_DEV_PLAN :AMS_ADP_DEV_YEAR "DEV_YEAR_CODE"] [:AMS_ASSESSMENT_ITEM :AMS_ADP_DEV_YEAR "DEV_YEAR_CODE"] [:AMS_WF_ACTIVITY :AMS_WF_ACTIVITY_DEF "ACTIVITY_DEF_REFID"] [:AMS_STIMULUS_SPECIFICATION :AMS_PROGRAM "PROGRAM_REFERENCE_ID"] [:AMS_SEQUENCE :AMS_PROGRAM "PROGRAM_ID"] [:AMS_REPORTING_CATEGORY :AMS_PROGRAM "PROGRAM_REF_ID"] [:AMS_PROGRAM :AMS_PROGRAM "PARENT_ID"] [:AMS_PGM_STANDARD_ALIGNMENT :AMS_PROGRAM "PROGRAM_ID"] [:AMS_PGM_RATIONALE_SET :AMS_PROGRAM "PROGRAM_REF_ID"] [:AMS_PGM_METADATA_FIELD :AMS_PROGRAM "PROGRAM_ID"] [:AMS_PGM_ASSET_ALIGNMENT :AMS_PROGRAM "PROGRAM_REF_ID"] [:AMS_METADATA_VALUE :AMS_PROGRAM "PROGRAM_REFID"] [:AMS_COPYRIGHT :AMS_PROGRAM "PROGRAM_REFERENCE_ID"] [:AMS_AUTH_GRANT :AMS_PROGRAM "PROGRAM_ID"] [:AMS_ASSET_PAY_RATE :AMS_PROGRAM "PROGRAM_REF_ID"] [:AMS_ASSET_ORDER :AMS_PROGRAM "PROGRAM_REF_ID"] [:AMS_ASSET_DEV_PLAN :AMS_PROGRAM "PROGRAM_ID"] [:AMS_ORDER_DETAIL :AMS_STIMULUS_ALIGN_SCHEME "STIMULUS_ALIGN_REFID"] [:AMS_PGM_METADATA_FIELD_VALUE :AMS_PGM_METADATA_FIELD "PROGRAM_METADATA_FIELD_ID"] [:AMS_WF_STATE :AMS_ASSET_STATUS_VALUE "STATUS_1"] [:AMS_WF_STATE :AMS_ASSET_STATUS_VALUE "STATUS_2"] [:AMS_ASSET_STATUS_VALUE :AMS_ASSET_STATUS_VALUE "PARENT"] [:AMS_ASSET :AMS_ASSET_STATUS_VALUE "STATUS_1"] [:AMS_ASSET :AMS_ASSET_STATUS_VALUE "STATUS_2"] [:AMS_WF_ACTIVITY_PERM :AMS_USER_PERMISSION "USER_PERMISSION_REFID"] [:AMS_USER_ROLE_PERMISSION :AMS_USER_PERMISSION "USER_PERMISSION_ID"] [:AMS_WF_STATE :AMS_WF_STATUS "STATUS_CODE"] [:AMS_WF_ACTIVITY_STATUS :AMS_WF_STATUS "STATUS_CODE"] [:AMS_ORDER_CONTRACT :AMS_ORDER_WF_STATE "ORDER_WF_STATE_REF_ID"] [:AMS_TEST_FORM :AMS_TEST "TEST_REFERENCE_ID"] [:AMS_HOTSPOT_AREA :AMS_HOTSPOT_CHOICE "HS_CHOICE_REF_ID"] [:AMS_OTHER_ASSET_FV :AMS_OTHER_ASSET "OTHER_ASSET_REFID"] [:AMS_CONTENT_PART :AMS_OTHER_ASSET "OTHER_ASSET_REF_ID"] [:AMS_WF_TRANSITION_RULE :AMS_WF_ACTIVITY "DEST_ACTIVITY_REFID"] [:AMS_WF_TRANSITION_RULE :AMS_WF_ACTIVITY "SRC_ACTIVITY_REFID"] [:AMS_WF_STATE_SMY :AMS_WF_ACTIVITY "ACTIVITY_REF_ID"] [:AMS_WF_STATE :AMS_WF_ACTIVITY "ACTIVITY_REFID"] [:AMS_WF_ACTIVITY_STATUS :AMS_WF_ACTIVITY "ACTIVITY_REFID"] [:AMS_WF_ACTIVITY_PERM :AMS_WF_ACTIVITY "WF_ACTIVITY_REFID"] [:AMS_ORDER_WF_STATE :AMS_WF_ACTIVITY "ACTIVITY_REF_ID"] [:AMS_SEQ_REPORT :AMS_REPORTS "REPORT_ID"] [:AMS_ORDER_METADATA_FV :AMS_ASSET_ORDER "ORDER_REFID"] [:AMS_ORDER_DETAIL :AMS_ASSET_ORDER "ORDER_REFID"] [:AMS_ITEM_ALIGN_SCHEME :AMS_REPORTING_CATEGORY "RPT_CATEGORY_REF_ID"] [:AMS_WF_STATE :AMS_USER "USER_REFID"] [:AMS_WF_STATE :AMS_USER "ASSIGNED_TO_USER_REFID"] [:AMS_USER_ACCOUNT_ROLE :AMS_USER "USER_REFERENCE_ID"] [:AMS_AUTH_GRANT :AMS_USER "USER_ID"] [:AMS_PUBCONFIG_ASSET :AMS_ASSET_FILE "ASSET_FILE_REF_ID"] [:AMS_ART_INFO :AMS_ASSET_FILE "ART_FILE_REF_ID"] [:AMS_ART_ASSET_FILE :AMS_ASSET_FILE "ASSET_FILE_REF_ID"] [:AMS_ITEM_STANDARD_ALIGNMENT :AMS_PGM_STANDARD_ALIGNMENT "PGM_STANDARDSET_REF_ID"] [:AMS_ITEM_ALIGN_SCHEME :AMS_PGM_STANDARD_ALIGNMENT "PGM_STANDARDSET_REF_ID"] [:AMS_WF_STATE :AMS_METADATA_FIELD "STATUS_2_OLD"] [:AMS_PGM_METADATA_FIELD :AMS_METADATA_FIELD "METADATA_FIELD_ID"] [:AMS_METADATA_VALUE :AMS_METADATA_FIELD "METADATA_FIELD_ID"] [:AMS_METADATA_FIELD :AMS_METADATA_FIELD "PARENT_METADATA_FIELD_ID"] [:AMS_ADP_METADATA_FV :AMS_METADATA_FIELD "METADATA_FIELD_REF_ID"] [:AMS_HOTSPOT_EXTENSION :AMS_ART_INFO "BACKGRND_ART_REF_ID"] [:AMS_HOTSPOT_EXTENSION :AMS_ART_INFO "HS_ICON_ART_REF_ID"] [:AMS_HOTSPOT_CHOICE :AMS_ART_INFO "ART_INFO_REF_ID"] [:AMS_HOTSPOT_CHOICE :AMS_ART_INFO "ALT_ART_INFO_REF_ID"] [:AMS_RATIONALE_SET :AMS_RATIONALE_SET "PARENT"] [:AMS_PGM_RATIONALE_SET :AMS_RATIONALE_SET "RATIONALE_SET_REF_ID"] [:AMS_CONTENT_PART :AMS_RATIONALE_SET "RATIONALE_SET_REF_ID"]))

;(def g (graph owdg2))
(def g (graph (apply weighted-digraph ams-graph)))
;(def g (graph owdg))

(def sel-tables)
(def table-pk)

(defn 
  selected-tables
  [col]
  (into #{} (map (fn [i] (first (st/split i #"\."))) col)))

(defn
  root-short-path
  [root end]
  (let [asoc-tbl (keys (filter (fn [i] (= (val i) (hash-set root end))) (:adj g)))]
    (if (if-nil-or-empty asoc-tbl)
      (shortest-path g (keyword root) (keyword end))
      asoc-tbl)))

(defn
  rem-root-from-sel-tables
  [root]
  (remove (fn [tb] (= (st/upper-case root) (st/upper-case tb))) sel-tables))


(defn
  check-kee
  [kee distinct-nodes]
  (some (fn [node] (= node kee)) distinct-nodes))

(defn
  filter-keys
  [root distinct-nodes spantrkeys]
  (filter (fn [kee] (check-kee kee distinct-nodes)) spantrkeys))

(defn
  filter-nodes
  [col distinct-nodes]
  (filter (fn [tb] (contains? distinct-nodes tb)) col))

(defn
  get-distinct-nodes
  "Get distinct nodes/set after finding the path with each selected table and Root table"
  [root]
  (set (reduce (fn [ls1 ls2] (concat ls1 ls2)) 
               (map (fn [end] (root-short-path root end)) 
                    (rem-root-from-sel-tables root)))))

(defn 
  get-join-tree
  [root distinct-nodes] 
  (let [span (select-keys (bf-span g root) distinct-nodes)]
    (into {}
          (filter (fn [maap] (not (empty? (val maap))))
                  (zipmap (keys span) 
                          (map (fn [node] (filter-nodes node distinct-nodes)) (vals span)))))))

(defn
  traverse
  [root distinct-nodes]
  (filter (fn [i] (some #(= i %) distinct-nodes)) (bf-traverse g root)))

(defn
  joins
  "Get a Map of spanning tree which includes all 'join' nodes"
  [root]
  (let [distinct-nodes (get-distinct-nodes root)]
    (into {} 
          (reverse (select-keys  (get-join-tree root distinct-nodes) 
                                 (traverse root distinct-nodes))))))

;;;; may need to change
(defn
  get-edge
  "get list of fk relation like ((:fk-table :pk-table) 'clm-name') "
  [g n1 n2]
  (if (has-edge? g n1 n2)
    (cons (bf-path g n1 n2) (list (weight g n1 n2)))
    (cons (bf-path g n2 n1) (list (weight g n2 n1)))))

(defn
  create-on-joins
  "create ON--JOIN relation e.g 'tab1.pk = tab2.fk', input is output of get-edge()"
  [fk-edge]
  (str (name (ffirst fk-edge)) "." 
       (second fk-edge) " = " 
       (name (second (first fk-edge))) "." 
       (table-pk (second (first fk-edge)))))

(defn
  left-otr-join
  [i rt-bool flst]
  (str " LEFT OUTER JOIN "  (name i) " ON " 
       (create-on-joins 
         (if rt-bool (get-edge owdg i flst)
           (get-edge owdg flst i)))))

(defn
  create-onjoins
  [lst rt-bool]
  (st/join (map (fn [i] (left-otr-join i rt-bool (first lst))) (second lst))))

(defn
  process-root-join
  [root-join]
  (create-onjoins root-join true))

(defn 
  process-rest-join
  [mp]
  (st/join (map #(create-onjoins % false) mp)))

(defn
  create-join
  [db-grph root op tbpk]  
  (def owdg (apply weighted-digraph db-grph))
  (def g (graph owdg))
  (def sel-tables (selected-tables op)) 
  (def table-pk tbpk) 
  (let [join-tree (joins root)]
    (str (process-root-join (reverse (into () (first join-tree))))    
         (process-rest-join (into {} (rest join-tree))))))

(defn
  test-create-join
  []  
  (def owdg (apply weighted-digraph ams-graph))
  (def g (graph owdg))
  ;(def sel-tables (selected-tables op)) 
  (def table-pk {}) 
  (let [join-tree (joins root)]
    (str (process-root-join (reverse (into () (first join-tree))))    
         (process-rest-join (into {} (rest join-tree))))))